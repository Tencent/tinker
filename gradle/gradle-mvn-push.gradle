apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'


def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : readPropertyFromLocalProperties('RELEASE_REPOSITORY_URL')
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : readPropertyFromLocalProperties('SNAPSHOT_REPOSITORY_URL')
}

def readPropertyFromLocalProperties(String key) {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (Exception e) {
        println("load local properties failed msg:${e.message}")
    }
    return properties.getProperty(key)
}

def getRepositoryUsername() {
    return hasProperty('REPOSITORY_USERNAME') ? REPOSITORY_USERNAME : readPropertyFromLocalProperties('REPOSITORY_USERNAME')
}

def getRepositoryPassword() {
    return hasProperty('REPOSITORY_PASSWORD') ? REPOSITORY_PASSWORD : readPropertyFromLocalProperties('REPOSITORY_PASSWORD')
}

def getBintrayUser() {
    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : readPropertyFromLocalProperties('BINTRAY_USER')
}

def getBintrayKey() {
    return hasProperty('BINTRAY_APIKEY') ? BINTRAY_APIKEY : readPropertyFromLocalProperties('BINTRAY_APIKEY')
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = version

            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        Distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }

        }
    }
}

bintray {
    user = getBintrayUser()
    key = getBintrayKey()
    configurations = ['archives']

    pkg {
        repo = 'maven'
        userOrg = BINTRAY_ORGANIZATION
        name = "${GROUP}:${POM_ARTIFACT_ID}"
        licenses = BINTRAY_LICENCE
        vcsUrl = POM_SCM_URL
        websiteUrl = POM_URL
        issueTrackerUrl = POM_ISSUE_URL
        publicDownloadNumbers = true
        publish = true
        dryRun = false
    }
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task buildAndPublishRepo(dependsOn: ['build', 'uploadArchives']) {
    doLast {
        println "*published to repo: ${project.group}:${project.name}:${project.version}"
    }
}

tasks.getByName("bintrayUpload") {
    it.doFirst {
        if (!isReleaseBuild()) {
            throw new GradleException("bintrayUpload only support release version")
        }
    }
}
