apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }
}
version = version
group = GROUP

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom.project {
            name POM_NAME
            artifactId POM_ARTIFACT_ID
            packaging POM_PACKAGING
            description POM_DESCRIPTION
            url POM_URL

            scm {
                url POM_SCM_URL
            }

            licenses {
                license {
                    name POM_LICENCE_NAME
                    url POM_LICENCE_URL
                    Distribution POM_LICENCE_DIST
                }
            }

            developers {
                developer {
                    id POM_DEVELOPER_ID
                    name POM_DEVELOPER_NAME
                }
            }
        }
    }
}


task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}


//for local maven test
afterEvaluate { project ->
    tasks.all { Task task ->
        if (task.name.equalsIgnoreCase('publishTinkerPatchPublicationToMavenLocal')) {
            task.dependsOn tasks.getByName('assemble')
        }
    }
}

publishing {
    publications {
        TinkerPatch(MavenPublication) {
            groupId = group
            artifactId = project.getName()
            version = version
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidJavadocsJar
            pom.withXml {
                // Resolve dependencies
                final depsNode = asNode().appendNode('dependencies')
                final addDep = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null
                            || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    // Determine actual artifactId for the dependency
                    def artifactId = dep.name
                    if (dep instanceof ProjectDependency) {
                        def p = (dep as ProjectDependency).dependencyProject
                        if (p.hasProperty('artifactId'))
                            artifactId = p.property('artifactId')
                    }

                    def node = depsNode.appendNode('dependency')
                    node.appendNode('groupId', dep.group)
                    node.appendNode('artifactId', artifactId)
                    node.appendNode('version', dep.version)
                    node.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = node.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionNode = node.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                [
                        'compile':          'compile',
                        'api':              'compile',
                        'implementation':   'runtime',
                        'compileOnly':      'compile',
                        'runtimeOnly':      'runtime'
                ].each { conf, scope ->
                    project.configurations[conf].allDependencies.each { addDep(it, scope) }
                }
            }
        }
    }
}

task buildAndPublishTinkerToLocalMaven(dependsOn: ['build', 'publishTinkerPatchPublicationToMavenLocal']) {
    group = 'tinker'
}

apply from: rootProject.file('gradle/check.gradle')